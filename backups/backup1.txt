#include <iostream>
#include <SDL2/SDL.h>
#include <vector>
#include <cmath>

SDL_Window* window= nullptr;
SDL_Renderer* renderer=nullptr;
SDL_Event keyboard;
const int WIDTH = 1400;
const int HEIGHT=890;
const float MOMENTUMCONSTANT=0.01;
const int MAXASS=10;
struct AsteroidParent{
    int assrelposy;
    int assrelposx;
    int assradius;
    int asssides;
    int assmomenty;
    int assmomentx;
    bool assisdead;
    std :: vector<int> chaos;
};
AsteroidParent asteroid[MAXASS];

void DrawAsteroid();

void AssInit();

int ScreenWrapX (int relposx);
int ScreenWrapY(int relposy);

bool truefalse();


void DrawPlayerSouth(int relposx, int relposy, int radius);

void DrawPlayerNorth(int relposx, int relposy, int radius);

void DrawPlayerEast(int relposx, int relposy, int radius);

void DrawPlayerWest(int relposx, int relposy, int radius);

int main()
{
//initalize
int relposx =WIDTH/2;
int relposy = HEIGHT/2;

SDL_Init(SDL_INIT_EVERYTHING);
SDL_CreateWindowAndRenderer(WIDTH,HEIGHT,0,&window,&renderer);

SDL_SetRenderDrawColor(renderer,0,0,0,255);
SDL_RenderClear(renderer);

SDL_SetRenderDrawColor(renderer,255,255,255,255);

SDL_RenderSetScale(renderer,1,1);    
//momentums
float momentx=0.0;
float momenty=0.0;

//player radius for drawing
int radius =10;

//initialize asteroid
AssInit();

//should add a way to close the game sometime uhhhh gameloop
bool open=true;
while(open)
{
while (SDL_PollEvent(&keyboard))
{
    if (keyboard.type ==SDL_KEYDOWN)
    {
        switch (keyboard.key.keysym.sym)
        {
            case SDLK_UP:
            momenty -=0.2;
            break;
            case SDLK_DOWN:
            momenty +=0.2;
            break;
            case SDLK_RIGHT:
            momentx+=0.2;
            break;
            case SDLK_LEFT:
            momentx-=0.2;
            break;
        }
    }
    if (keyboard.type == SDL_QUIT)
    {
        open =false;
    }
}

//clear the window
SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
SDL_RenderClear(renderer);
//update position
relposy= relposy+momenty;
relposx= relposx+momentx;
//udate ass position
for (int i = 0; i<MAXASS; i++)
{
    asteroid[i].assrelposx += asteroid[i].assmomentx;
    asteroid[i].assrelposy += asteroid[i].assmomenty;
}

//draw the ship
SDL_SetRenderDrawColor(renderer,255,255,255,255);
if (fabs(momenty) > fabs(momentx) || (momenty==0&& momentx==0))
{
    if(momenty<=0)
    {
    DrawPlayerNorth(relposx,relposy,radius);
    }
    else
    {
      DrawPlayerSouth(relposx,relposy,radius);
    }
}
else
{
    if (momentx >=0)
    {
         DrawPlayerEast( relposx,  relposy,  radius);
    }
    else
    {
        DrawPlayerWest(relposx,relposy,radius);
    }
}
DrawAsteroid();
//render frame
SDL_RenderPresent(renderer);
SDL_Delay(5);


//wall wrap
relposx = ScreenWrapX(relposx);
relposy = ScreenWrapY(relposy);

//ass wall wrap 
for (int i =0; i<MAXASS; i++)
{
    asteroid[i].assrelposx =ScreenWrapX(asteroid[i].assrelposx);
     asteroid[i].assrelposy =ScreenWrapY(asteroid[i].assrelposy);
}
}
return 0;
}

void DrawPlayerNorth(int relposx, int relposy, int radius)
{
std :: vector<SDL_Point> playerpoints;
int topx=0;
int topy =0;
int lbottomx=0;
int lbottomy=0;
int rbottomx=0;
int rbottomy=0;

topx=relposx;
topy=relposy-radius;
playerpoints.push_back({topx,topy});

lbottomx=relposx-(radius/2);
lbottomy= relposy+radius;
playerpoints.push_back({lbottomx,lbottomy});

rbottomx=relposx+(radius/2);
rbottomy=relposy+radius;
playerpoints.push_back({rbottomx,rbottomy});
playerpoints.push_back({topx,topy});
SDL_RenderDrawLines( renderer, playerpoints.data(), playerpoints.size());

}
void DrawPlayerSouth(int relposx, int relposy, int radius)
{
std :: vector<SDL_Point> playerpoints;
int topx=0;
int topy =0;
int lbottomx=0;
int lbottomy=0;
int rbottomx=0;
int rbottomy=0;

topx=relposx;
topy=relposy+radius;
playerpoints.push_back({topx,topy});

lbottomx=relposx-(radius/2);
lbottomy= relposy-radius;
playerpoints.push_back({lbottomx,lbottomy});

rbottomx=relposx+(radius/2);
rbottomy=relposy-radius;
playerpoints.push_back({rbottomx,rbottomy});
playerpoints.push_back({topx,topy});
SDL_RenderDrawLines( renderer, playerpoints.data(), playerpoints.size());

}
void DrawPlayerEast(int relposx, int relposy, int radius)
{
std :: vector<SDL_Point> playerpoints;
int topx=0;
int topy =0;
int lbottomx=0;
int lbottomy=0;
int rbottomx=0;
int rbottomy=0;

topx=relposx+radius;
topy=relposy;
playerpoints.push_back({topx,topy});

lbottomx=relposx-(radius/2);
lbottomy= relposy+radius/2;
playerpoints.push_back({lbottomx,lbottomy});

rbottomx=relposx-(radius/2);
rbottomy=relposy-radius/2;
playerpoints.push_back({rbottomx,rbottomy});
playerpoints.push_back({topx,topy});
SDL_RenderDrawLines( renderer, playerpoints.data(), playerpoints.size());
}

void DrawPlayerWest(int relposx, int relposy, int radius)
{
std :: vector<SDL_Point> playerpoints;
int topx=0;
int topy =0;
int lbottomx=0;
int lbottomy=0;
int rbottomx=0;
int rbottomy=0;

topx=relposx-radius;
topy=relposy;
playerpoints.push_back({topx,topy});

lbottomx=relposx+(radius/2);
lbottomy= relposy+radius/2;
playerpoints.push_back({lbottomx,lbottomy});

rbottomx=relposx+(radius/2);
rbottomy=relposy-radius/2;
playerpoints.push_back({rbottomx,rbottomy});
playerpoints.push_back({topx,topy});
SDL_RenderDrawLines( renderer, playerpoints.data(), playerpoints.size());
}



void DrawAsteroid()
{



int drawx=0;
int drawy =0;

std :: vector<SDL_Point> asspoints;
for (int j=0;j<MAXASS; j++)
{
    int angle= 360/asteroid[j].asssides;
for(int i =0; i<asteroid[j].asssides;i++)
{
drawx= asteroid[j].assrelposx+(cos(angle*i*M_PI/180))* asteroid[j].assradius+asteroid[j].chaos[i];
drawy= asteroid[j].assrelposy+(sin(angle*i*M_PI/180))*asteroid[j].assradius;
asspoints.push_back({drawx,drawy});

}
asspoints.push_back(asspoints[0]);
SDL_RenderDrawLines( renderer, asspoints.data(), asspoints.size());
asspoints.clear();
}

}
void AssInit()
{
    


    bool negative;
    for (int i = 0; i<MAXASS;i++)
    {
        negative= truefalse();
        asteroid[i].assradius =rand()%40+10;
        asteroid[i].asssides =rand()%9+5;
        asteroid[i].assrelposx =rand() %WIDTH;
        asteroid[i].assrelposy =rand() %HEIGHT;
        asteroid[i].assmomentx=rand()%3+-3;
        if (negative)
        {
            asteroid[i].assmomentx =asteroid[i].assmomentx * -1;
        }
        negative= truefalse();
        asteroid[i].assmomenty=rand()%3+-3;
         if (negative)
        {
            asteroid[i].assmomenty =asteroid[i].assmomenty * -1;
        }
       
        
            for (int j=0; j < asteroid[i].asssides; j++)
            {
                if (truefalse())
                {
                asteroid[i].chaos.push_back( rand()% (asteroid[i].assradius / 2 + 1)) ;
                
                }
                else 
                {
                     asteroid[i].chaos.push_back( 0) ;
                }
            }
        
    }
}
int ScreenWrapY(int relposy)
{
    if (relposy<=0)
{
    relposy = HEIGHT-1;
   
}

if (relposy>=HEIGHT )
{
    relposy = 1;
    
}

return relposy;
}
int ScreenWrapX (int relposx)
{
    if (relposx<=0)
{
    relposx = WIDTH-1;
   
}

if (relposx>=WIDTH )
{
    relposx = 1;
    
}
return relposx;
}

bool truefalse()
{
    bool maybe=rand()%2==0;
    return maybe;
}
